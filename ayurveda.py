{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf766f80-c43b-44c7-b709-7011e2972e78",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\tqdm\\auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n",
      "C:\\Users\\khand\\AppData\\Local\\Temp\\ipykernel_11624\\168328949.py:120: UserWarning: You have not specified a value for the `type` parameter. Defaulting to the 'tuples' format for chatbot messages, but this is deprecated and will be removed in a future version of Gradio. Please set type='messages' instead, which uses openai-style dictionaries with 'role' and 'content' keys.\n",
      "  chatbot = gr.Chatbot(label=\"AI Chat\", height=300)\n",
      "C:\\Users\\khand\\AppData\\Local\\Temp\\ipykernel_11624\\168328949.py:151: UserWarning: You have not specified a value for the `type` parameter. Defaulting to the 'tuples' format for chatbot messages, but this is deprecated and will be removed in a future version of Gradio. Please set type='messages' instead, which uses openai-style dictionaries with 'role' and 'content' keys.\n",
      "  doctor_chat = gr.Chatbot(label=\"Doctor Chat\", height=300)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* Running on local URL:  http://127.0.0.1:7862\n",
      "* To create a public link, set `share=True` in `launch()`.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><iframe src=\"http://127.0.0.1:7862/\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception in thread Thread-9 (run):\n",
      "Traceback (most recent call last):\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m1043\u001b[0m, in \u001b[35m_bootstrap_inner\u001b[0m\n",
      "    \u001b[31mself.run\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\ipykernel\\ipkernel.py\"\u001b[0m, line \u001b[35m766\u001b[0m, in \u001b[35mrun_closure\u001b[0m\n",
      "    \u001b[31m_threading_Thread_run\u001b[0m\u001b[1;31m(self)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m994\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mself._target\u001b[0m\u001b[1;31m(*self._args, **self._kwargs)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Temp\\ipykernel_11624\\168328949.py\"\u001b[0m, line \u001b[35m15\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mengine.runAndWait\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pyttsx3\\engine.py\"\u001b[0m, line \u001b[35m180\u001b[0m, in \u001b[35mrunAndWait\u001b[0m\n",
      "    raise RuntimeError('run loop already started')\n",
      "\u001b[1;35mRuntimeError\u001b[0m: \u001b[35mrun loop already started\u001b[0m\n",
      "Exception in thread Thread-10 (run):\n",
      "Traceback (most recent call last):\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m1043\u001b[0m, in \u001b[35m_bootstrap_inner\u001b[0m\n",
      "    \u001b[31mself.run\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\ipykernel\\ipkernel.py\"\u001b[0m, line \u001b[35m766\u001b[0m, in \u001b[35mrun_closure\u001b[0m\n",
      "    \u001b[31m_threading_Thread_run\u001b[0m\u001b[1;31m(self)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m994\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mself._target\u001b[0m\u001b[1;31m(*self._args, **self._kwargs)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Temp\\ipykernel_11624\\168328949.py\"\u001b[0m, line \u001b[35m15\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mengine.runAndWait\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pyttsx3\\engine.py\"\u001b[0m, line \u001b[35m180\u001b[0m, in \u001b[35mrunAndWait\u001b[0m\n",
      "    raise RuntimeError('run loop already started')\n",
      "\u001b[1;35mRuntimeError\u001b[0m: \u001b[35mrun loop already started\u001b[0m\n",
      "Exception in thread Thread-11 (run):\n",
      "Traceback (most recent call last):\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m1043\u001b[0m, in \u001b[35m_bootstrap_inner\u001b[0m\n",
      "    \u001b[31mself.run\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\ipykernel\\ipkernel.py\"\u001b[0m, line \u001b[35m766\u001b[0m, in \u001b[35mrun_closure\u001b[0m\n",
      "    \u001b[31m_threading_Thread_run\u001b[0m\u001b[1;31m(self)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m994\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mself._target\u001b[0m\u001b[1;31m(*self._args, **self._kwargs)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Temp\\ipykernel_11624\\168328949.py\"\u001b[0m, line \u001b[35m15\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mengine.runAndWait\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pyttsx3\\engine.py\"\u001b[0m, line \u001b[35m180\u001b[0m, in \u001b[35mrunAndWait\u001b[0m\n",
      "    raise RuntimeError('run loop already started')\n",
      "\u001b[1;35mRuntimeError\u001b[0m: \u001b[35mrun loop already started\u001b[0m\n",
      "Exception in thread Thread-12 (run):\n",
      "Traceback (most recent call last):\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m1043\u001b[0m, in \u001b[35m_bootstrap_inner\u001b[0m\n",
      "    \u001b[31mself.run\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\ipykernel\\ipkernel.py\"\u001b[0m, line \u001b[35m766\u001b[0m, in \u001b[35mrun_closure\u001b[0m\n",
      "    \u001b[31m_threading_Thread_run\u001b[0m\u001b[1;31m(self)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m994\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mself._target\u001b[0m\u001b[1;31m(*self._args, **self._kwargs)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Temp\\ipykernel_11624\\168328949.py\"\u001b[0m, line \u001b[35m15\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mengine.runAndWait\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pyttsx3\\engine.py\"\u001b[0m, line \u001b[35m180\u001b[0m, in \u001b[35mrunAndWait\u001b[0m\n",
      "    raise RuntimeError('run loop already started')\n",
      "\u001b[1;35mRuntimeError\u001b[0m: \u001b[35mrun loop already started\u001b[0m\n",
      "Exception in thread Thread-13 (run):\n",
      "Traceback (most recent call last):\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m1043\u001b[0m, in \u001b[35m_bootstrap_inner\u001b[0m\n",
      "    \u001b[31mself.run\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\ipykernel\\ipkernel.py\"\u001b[0m, line \u001b[35m766\u001b[0m, in \u001b[35mrun_closure\u001b[0m\n",
      "    \u001b[31m_threading_Thread_run\u001b[0m\u001b[1;31m(self)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py\"\u001b[0m, line \u001b[35m994\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mself._target\u001b[0m\u001b[1;31m(*self._args, **self._kwargs)\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Temp\\ipykernel_11624\\168328949.py\"\u001b[0m, line \u001b[35m15\u001b[0m, in \u001b[35mrun\u001b[0m\n",
      "    \u001b[31mengine.runAndWait\u001b[0m\u001b[1;31m()\u001b[0m\n",
      "    \u001b[31m~~~~~~~~~~~~~~~~~\u001b[0m\u001b[1;31m^^\u001b[0m\n",
      "  File \u001b[35m\"C:\\Users\\khand\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pyttsx3\\engine.py\"\u001b[0m, line \u001b[35m180\u001b[0m, in \u001b[35mrunAndWait\u001b[0m\n",
      "    raise RuntimeError('run loop already started')\n",
      "\u001b[1;35mRuntimeError\u001b[0m: \u001b[35mrun loop already started\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "import gradio as gr\n",
    "import pyttsx3\n",
    "import speech_recognition as sr\n",
    "import threading\n",
    "import datetime\n",
    "\n",
    "# Initialize speech engine (text-to-speech)\n",
    "engine = pyttsx3.init()\n",
    "engine.setProperty(\"rate\", 150)\n",
    "engine.setProperty('voice', 'english')  # Adjust voice if needed\n",
    "\n",
    "def speak_async(text):\n",
    "    def run():\n",
    "        engine.say(text)\n",
    "        engine.runAndWait()\n",
    "    threading.Thread(target=run).start()\n",
    "\n",
    "# Initialize speech recognizer (speech-to-text)\n",
    "recognizer = sr.Recognizer()\n",
    "\n",
    "def recognize_speech_from_mic():\n",
    "    with sr.Microphone() as source:\n",
    "        print(\"Listening...\")\n",
    "        audio = recognizer.listen(source, phrase_time_limit=5)\n",
    "    try:\n",
    "        text = recognizer.recognize_google(audio, language='en-IN')\n",
    "        print(f\"Recognized: {text}\")\n",
    "        return text\n",
    "    except Exception as e:\n",
    "        return f\"Error recognizing speech: {str(e)}\"\n",
    "\n",
    "# Sample data for doctors, medicines, remedies\n",
    "doctors = [\n",
    "    {\"id\": \"d1\", \"name\": \"Dr. Asha Verma\", \"rating\": 4.8},\n",
    "    {\"id\": \"d2\", \"name\": \"Dr. Rajesh Kumar\", \"rating\": 4.5},\n",
    "    {\"id\": \"d3\", \"name\": \"Dr. Meera Singh\", \"rating\": 4.7},\n",
    "]\n",
    "\n",
    "medicine_suggestions = {\n",
    "    \"fever\": [(\"Paracetamol\", \"https://www.amazon.in/dp/B01N7NQXQ1\"), (\"Giloy Juice\", \"https://www.amazon.in/dp/B08XX7VJ64\")],\n",
    "    \"cold\": [(\"Vicks VapoRub\", \"https://www.amazon.in/dp/B07B4XJ7D1\"), (\"Tulsi Drops\", \"https://www.amazon.in/dp/B07F7D7MKR\")],\n",
    "}\n",
    "\n",
    "home_remedies = [\n",
    "    {\"name\": \"Ginger Tea\", \"benefit\": \"Boosts immunity\", \"youtube\": \"https://www.youtube.com/watch?v=J2XUkKK8xEY\"},\n",
    "    {\"name\": \"Turmeric Milk\", \"benefit\": \"Anti-inflammatory\", \"youtube\": \"https://www.youtube.com/watch?v=oymzPylNUOY\"},\n",
    "]\n",
    "\n",
    "# Appointment bookings stored in memory (demo)\n",
    "appointments = []\n",
    "\n",
    "# Doctor chat history stored in memory per doctor (demo)\n",
    "doctor_chats = {\n",
    "    \"d1\": [],\n",
    "    \"d2\": [],\n",
    "    \"d3\": [],\n",
    "}\n",
    "\n",
    "# ----------------- Functions -------------------\n",
    "\n",
    "def ai_assistant_reply(message):\n",
    "    # Placeholder AI reply - in real app, call your AI API here\n",
    "    reply = f\"Dr. Ayurveda Assistant: You said '{message}'. Here's a suggestion: Stay hydrated and consult a doctor if symptoms persist.\"\n",
    "    speak_async(reply)\n",
    "    return reply\n",
    "\n",
    "def chat_with_ai(message, history):\n",
    "    reply = ai_assistant_reply(message)\n",
    "    history.append((message, reply))\n",
    "    return \"\", history\n",
    "\n",
    "def book_appointment(doctor_id, patient_name, date_str):\n",
    "    if not patient_name or not date_str:\n",
    "        return \"Please enter your name and appointment date.\"\n",
    "    try:\n",
    "        date_obj = datetime.datetime.strptime(date_str, \"%Y-%m-%d\")\n",
    "        if date_obj < datetime.datetime.now():\n",
    "            return \"Appointment date must be in the future.\"\n",
    "    except ValueError:\n",
    "        return \"Invalid date format. Use YYYY-MM-DD.\"\n",
    "    appointments.append({\"doctor_id\": doctor_id, \"patient\": patient_name, \"date\": date_str})\n",
    "    return f\"Appointment booked with {doctor_id} on {date_str} for {patient_name}.\"\n",
    "\n",
    "def get_doctor_name(doc_id):\n",
    "    for d in doctors:\n",
    "        if d[\"id\"] == doc_id:\n",
    "            return d[\"name\"]\n",
    "    return \"Unknown Doctor\"\n",
    "\n",
    "def chat_with_doctor(doctor_id, message, history):\n",
    "    if message.strip() == \"\":\n",
    "        return history, \"\"\n",
    "    reply = f\"{get_doctor_name(doctor_id)}: Thank you for your message. We will get back to you soon.\"\n",
    "    doctor_chats[doctor_id].append((message, reply))\n",
    "    history.append((message, reply))\n",
    "    return history, \"\"\n",
    "\n",
    "def rate_doctor(doctor_id, rating, reviews):\n",
    "    for d in doctors:\n",
    "        if d[\"id\"] == doctor_id:\n",
    "            d[\"rating\"] = rating\n",
    "    return f\"Thank you for rating {get_doctor_name(doctor_id)} with {rating} stars.\"\n",
    "\n",
    "def suggest_medicines(symptom):\n",
    "    symptom = symptom.lower()\n",
    "    meds = medicine_suggestions.get(symptom)\n",
    "    if not meds:\n",
    "        return \"No medicine suggestions available for this symptom.\"\n",
    "    result = \"Suggested Medicines:\\n\"\n",
    "    for med, link in meds:\n",
    "        result += f\"- [{med}]({link})\\n\"\n",
    "    return result\n",
    "\n",
    "# ------------------ Gradio UI ------------------\n",
    "\n",
    "with gr.Blocks() as demo:\n",
    "    gr.Markdown(\"# 🌿 Ayurvedic AI Assistant & Wellness Platform\")\n",
    "\n",
    "    with gr.Tab(\"Chat with AI Assistant\"):\n",
    "        chatbot = gr.Chatbot(label=\"AI Chat\", height=300)\n",
    "        txt = gr.Textbox(placeholder=\"Type your message here...\")\n",
    "        mic_btn = gr.Button(\"🎙 Speak\")\n",
    "        send_btn = gr.Button(\"Send\")\n",
    "        clear_btn = gr.Button(\"Clear Chat\")\n",
    "\n",
    "        def mic_to_text():\n",
    "            text = recognize_speech_from_mic()\n",
    "            return text\n",
    "\n",
    "        mic_btn.click(mic_to_text, outputs=txt)\n",
    "        send_btn.click(chat_with_ai, inputs=[txt, chatbot], outputs=[txt, chatbot])\n",
    "        txt.submit(chat_with_ai, inputs=[txt, chatbot], outputs=[txt, chatbot])\n",
    "        clear_btn.click(lambda: [], None, chatbot)\n",
    "\n",
    "    with gr.Tab(\"Book Appointments\"):\n",
    "        doc_dropdown = gr.Dropdown(choices=[d[\"id\"] for d in doctors], label=\"Select Doctor\", value=doctors[0][\"id\"])\n",
    "        patient_name = gr.Textbox(label=\"Your Name\")\n",
    "        date_input = gr.Textbox(label=\"Appointment Date (YYYY-MM-DD)\", placeholder=\"2025-06-14\")\n",
    "        book_btn = gr.Button(\"Book Appointment\")\n",
    "        status = gr.Textbox(label=\"Status\", interactive=False)\n",
    "\n",
    "        def book(doc_id, name, date_str):\n",
    "            doc_name = get_doctor_name(doc_id)\n",
    "            result = book_appointment(doc_name, name, date_str)\n",
    "            return result\n",
    "\n",
    "        book_btn.click(book, inputs=[doc_dropdown, patient_name, date_input], outputs=status)\n",
    "\n",
    "    with gr.Tab(\"Chat with Doctors\"):\n",
    "        doctor_for_chat = gr.Dropdown(choices=[d[\"id\"] for d in doctors], label=\"Select Doctor\", value=doctors[0][\"id\"])\n",
    "        doctor_chat = gr.Chatbot(label=\"Doctor Chat\", height=300)\n",
    "        msg_input = gr.Textbox(placeholder=\"Message to doctor...\")\n",
    "        send_msg_btn = gr.Button(\"Send\")\n",
    "        clear_chat_btn = gr.Button(\"Clear\")\n",
    "\n",
    "        def doctor_send(doc_id, msg, history):\n",
    "            return chat_with_doctor(doc_id, msg, history), \"\"\n",
    "\n",
    "        send_msg_btn.click(doctor_send, inputs=[doctor_for_chat, msg_input, doctor_chat], outputs=[doctor_chat, msg_input])\n",
    "        msg_input.submit(doctor_send, inputs=[doctor_for_chat, msg_input, doctor_chat], outputs=[doctor_chat, msg_input])\n",
    "        clear_chat_btn.click(lambda: [], None, doctor_chat)\n",
    "\n",
    "    with gr.Tab(\"Video Consultations\"):\n",
    "        gr.Markdown(\"*Note:* This is a placeholder. Implement your video call system here.\")\n",
    "        gr.Markdown(\"[Join Video Call](https://meet.google.com)\")\n",
    "\n",
    "    with gr.Tab(\"Doctor Ratings & Reviews\"):\n",
    "        rate_doc = gr.Dropdown(choices=[d[\"id\"] for d in doctors], label=\"Select Doctor\", value=doctors[0][\"id\"])\n",
    "        rating_slider = gr.Slider(minimum=1, maximum=5, step=1, label=\"Rate Doctor\")\n",
    "        review_input = gr.Textbox(label=\"Write a Review\")\n",
    "        submit_review_btn = gr.Button(\"Submit Review\")\n",
    "        review_status = gr.Textbox(interactive=False)\n",
    "\n",
    "        def submit_review(doc_id, rating, review):\n",
    "            res = rate_doctor(doc_id, rating, review)\n",
    "            return res\n",
    "\n",
    "        submit_review_btn.click(submit_review, inputs=[rate_doc, rating_slider, review_input], outputs=review_status)\n",
    "\n",
    "    with gr.Tab(\"Medicine Suggestions\"):\n",
    "        symptom_input = gr.Textbox(label=\"Enter symptom (e.g. fever, cold)\")\n",
    "        medicine_output = gr.Markdown()\n",
    "        check_btn = gr.Button(\"Get Suggestions\")\n",
    "\n",
    "        check_btn.click(lambda symptom: suggest_medicines(symptom), inputs=symptom_input, outputs=medicine_output)\n",
    "\n",
    "    with gr.Tab(\"Home Remedies & Videos\"):\n",
    "        remedies_md = \"\"\n",
    "        for rem in home_remedies:\n",
    "            remedies_md += f\"### {rem['name']}\\nBenefit: {rem['benefit']}\\n[Watch Video]({rem['youtube']})\\n\\n\"\n",
    "        gr.Markdown(remedies_md)\n",
    "\n",
    "    gr.Markdown(\"© 2025 AyurTech Wellness Platform\")\n",
    "\n",
    "demo.launch()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ddc02ae-412f-4f73-a204-f41eda080a58",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
